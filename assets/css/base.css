/* ==========================================================================
   Base Stylesheet - professional comments added
   Purpose:
     - Provide a minimal, well-documented foundation for the project.
     - Define design tokens (colors, spacing, radius), a small reset, and
       basic element defaults so component styles can rely on consistent base behavior.
   Notes:
     - Keep this file focused on global defaults only. Component-specific overrides
       should live in components.css or layout.css to maintain clear separation.
   ========================================================================== */
@import url('https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Cal+Sans&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:ital,wght@0,200..800;1,200..800&display=swap');

/* --------------------------------------------------------------------------
   1) Root variables (design tokens)
   - Centralize values that determine the visual identity (type, color, spacing).
   - Change tokens here to adapt the whole UI theme consistently.
   -------------------------------------------------------------------------- */
:root {
   /* Typography families */
   --font-family-heading: "Cal Sans", sans-serif;
   --font-family-base: "Poppins", Arial, sans-serif;
   --font-family-secondary: "Plus Jakarta Sans", Arial, sans-serif;
   /* --color-primary: #1a73e8;
   --color-secondary: #ff9800;
   --color-background: #ffffff;
   --color-text: #222222;
   --color-text-light: #555555;
   --color-border: #e0e0e0; */
   /*  */
   --color-primary: #f5ad24;
   --color-secondary: #FECE26;
   --light-bg: #1c222911;
   --color-text: #020202;
   --color-text-active: #000000;
   /* Icon Colors */
   --like-color: #f6305d;
   /* Font Size */
   --base-fs: 16px;
   /* Corner radius scale
      - Use semantic sizes (sm/md/lg) for consistent rounding across components.
   */
   --radius-sm: 4px;
   --radius-md: 8px;
   --radius-lg: 16px;
   /* Spacing scale (use with margin / padding to keep rhythm consistent) */
   --spacing-xxs: 0.25rem;
   --spacing-xs: 0.5rem;
   --spacing-sm: 0.75rem;
   --spacing-md: 1rem;
   --spacing-lg: 2rem;
   /* Transition presets
      - Use these for consistent animation timing across the UI. */
   --transition-fast: all 0.2s ease;
   --transition-normal: all 0.3s ease;
   /* Gradients */
   --btn-gradient: linear-gradient(93.25deg, #FECE26 -49.57%, #E5741F 98.1%);
   /* Layouts */
   --sidebar-width: 345px;
   --right-aside-width: 400px;
   --header-height: 76px;
   /* Box Shadows */
   --card-shadow: 0px 6px 4px -4px #08080803, 0px 2px 13.5px 1px #0808080A;
}

/* --------------------------------------------------------------------------
   2) CSS Reset
   - Remove default browser spacing and set box-sizing to border-box to make
     layout calculations predictable.
   -------------------------------------------------------------------------- */
*,
*::before,
*::after {
   margin: 0;
   padding: 0;
   box-sizing: border-box;
}

/* --------------------------------------------------------------------------
   3) Global defaults
   - Set base font sizing, background, text color and smoothing for better
     cross-platform rendering.
   -------------------------------------------------------------------------- */
html {
   font-size: 16px;
   /* predictable rem calculations */
   scroll-behavior: smooth;
   /* optional UX improvement for in-page navigation */
}

body {
   font-family: var(--font-family-base);
   background-color: #F4F4F4;
   color: var(--color-text);
   line-height: 1.6;
   -webkit-font-smoothing: antialiased;
   -moz-osx-font-smoothing: grayscale;
}

/* Animations */
@keyframes heartLikedPopUpAnimation {
   0% {
      transform: scale(1);
   }

   40% {
      transform: scale(1.4);
   }

   60% {
      transform: scale(0.9);
   }

   80% {
      transform: scale(1.2);
   }

   100% {
      transform: scale(1);
   }
}

/* Global Components */
/* Multi Tabs Functionality */
[data-multiple-tabs-section] {
   [data-multi-tabs-switch-btn] {
      &[data__active] {}
   }

   [data-multi-tabs-content-tab] {
      display: none;

      &[data__active] {
         display: block;
      }
   }
}

/* --------------------------------------------------------------------------
   4) Typography
   - Headings use the dedicated heading font for clear hierarchy.
   - Keep paragraph defaults light; components can override for emphasis.
   -------------------------------------------------------------------------- */
h1,
h2,
h3,
h4,
h5,
h6 {
   font-family: var(--font-family-heading);
   font-weight: 600;
   color: var(--color-text);
   line-height: 1.3;
}

p {
   /* Intentionally minimal here. Use --color-text-light on components when needed. */
}

/* Links
   - Keep link styling minimal and provide a smooth hover transition. */
a {
   text-decoration: none;
   transition: var(--transition-fast);
}

/* --------------------------------------------------------------------------
   5) Images & media
   - Make media responsive and remove inline spacing to keep layout stable.
   -------------------------------------------------------------------------- */
img,
video {
   max-width: 100%;
   height: auto;
   display: block;
}

/* --------------------------------------------------------------------------
   6) Lists
   - Remove default list styles here; explicit styles should be applied where lists are used.
   -------------------------------------------------------------------------- */
ul,
ol {
   list-style: none;
}

/* --------------------------------------------------------------------------
   7) Form controls and buttons (base resets)
   - Normalize appearance and inheritance so controls match the surrounding typography.
   - Component styles should reintroduce borders, focus states and interactions.
   -------------------------------------------------------------------------- */
button,
input,
textarea,
select {
   font: inherit;
   border: none;
   /* outline: none; */
   background: none;
}

input,
textarea {
   min-height: 48px;
   padding: 0 12px;
   border-radius: 13px;
   background: #F9F9F9;
   color: #716F6F;
   border: 1.5px solid #EBEBEB;
   width: 100%;
   /* useful for form layout components */
}

/* Shared typography for labels and form placeholders to keep input text consistent */
label,
input,
input::placeholder {
   font-family: var(--font-family-base);
   font-weight: 500;
   font-size: 15px;
   letter-spacing: 0;
   color: #716F6F;
   transition: var(--transition-fast);
}

/* --------------------------------------------------------------------------
   8) Utility classes and small component patterns
   - Keep these lightweight and generic so multiple components can reuse them.
   -------------------------------------------------------------------------- */
/* Layout container used across the app to constrain content width */
.container {
   max-width: 1440px;
   width: 100%;
   margin: 0 auto;
}

/* SVG icon helper
   - Provide a default stroke color and a transition for subtle hover feedback.
   - Note: nested selector syntax in this file follows the existing style;
     ensure build process supports CSS nesting if using production CSS (or convert to flat selectors).
*/
/* Card Title */
.card {
   box-shadow: var(--card-shadow);
   border-radius: 32px;
   transition: var(--transition-normal);
   background-color: white;

   &:hover {
      box-shadow: 0px 6px 4px -4px #08080816, 0px 2px 13.5px 1px #08080825;
   }
}

.card-heading {
   font-family: var(--font-family-heading);
   font-weight: 500;
   font-size: 24px;
   line-height: 100%;
   text-transform: capitalize;
   color: #020202;
}

.icon-btn {
   width: 24px;
   aspect-ratio: 1/1;
   display: flex;
   align-items: center;
   justify-content: center;
   transition: var(--transition-fast);
   cursor: pointer;

   svg {
      path {
         stroke: #505050;
      }
   }

   &:hover {
      svg {
         path {
            stroke: var(--color-text-active);
         }
      }
   }
}

.svg-icon {
   path {
      transition: var(--transition-fast);
      stroke: #727272;
      stroke: #505050;
   }
}

/* Hover state for icon links to increase contrast */
.icon-link:hover .svg-icon path,
.svg-icon:hover path {
   stroke: #404040;
   stroke: var(--color-text-active);
}

/* Square icon-link element used in header/navigation */
.icon-link {
   display: flex;
   align-items: center;
   justify-content: center;
   width: 42px;
   aspect-ratio: 1/1;
}

/* Input wrapper pattern used for search and form controls
   - Keeps placeholder icon and label visually inside the input area.
   - Uses :has() where supported to drive focus-based styling on the wrapper. */
.label-input {
   display: flex;
   align-items: center;
   position: relative;
   background: #F9F9F9;
   width: 100%;
   border-radius: 13px;

   .input-placeholder-icon {
      transition: var(--transition-fast);
      position: absolute;
      left: 12px;
      display: flex;

      .svg-icon path {
         stroke: #727272;
      }
   }

   label {
      position: absolute;
      left: 46px;
   }

   input {
      padding-left: 46px;
      background-color: transparent;
      position: relative;
      z-index: 2;
      outline: none;
      border-radius: inherit;
   }

   /* Hover and focus visual states for the entire wrapper */
   &:hover {
      .input-placeholder-icon {

         .svg-icon path,
         .svg-icon:hover path {
            stroke: #404040;
         }
      }

      label,
      input,
      input::placeholder {
         color: #404040;
      }

      input {
         border-color: #a1a1a1;
         border-color: #cecece;
      }
   }

   /* Stronger focus state for the input element */
   &:has(input:focus) {
      input {
         border-color: #000000;
         box-shadow: 0px 6px 4px -4px #08080814, 0px 2px 13.5px 1px #08080818;
         color: #000000;
      }

      .input-placeholder-icon {
         .svg-icon path {
            stroke: #000000;
         }
      }
   }
}

/* Profile avatar helper
   - Constrains avatar size and ensures images use cover to fill the frame.
   - Border radius chosen for the visual style; change to 50% for fully circular avatars.
*/
.hover-scale-icon {
   svg {}

   svg {
      transition: var(--transition-fast);
      display: block;
   }

   &:active {
      svg {
         transform: scale(1) !important;
      }
   }

   &:hover {
      svg {
         transform: scale(1.15);
      }
   }
}

.active-down-effect {
   transition: var(--transition-fast);

   &:active {
      transform: scale(.95);
   }
}

.active-down-effect-2x {
   transition: var(--transition-fast);

   &:active {
      transform: scale(.90);
   }
}

.profile-avatar {
   width: 53px;
   aspect-ratio: 1/1;

   img {
      width: 100%;
      aspect-ratio: 1/1;
      object-fit: cover;
      border-radius: 21px;
   }
}

.btn-primary {
   width: 100%;
   display: flex;
   align-items: center;
   justify-content: center;
   border-radius: 20px;
   padding-block: 24px;
   gap: 10px;
   color: white;
   background: linear-gradient(93.25deg, #E5741F -49.57%, #FECE26 98.1%);
   box-shadow: 0px 4px 9px 0px #0000000F;
   position: relative;
   overflow: hidden;
   transition: var(--transition-fast);

   span {
      font-family: var(--font-family-heading);
      font-weight: 500;
      font-size: 20px;
      line-height: 100%;
      letter-spacing: 4%;
      position: relative;
      transition: var(--transition-fast);
   }

   svg {
      position: relative;
      transition: var(--transition-fast);
   }

   &:hover {
      background: linear-gradient(93.25deg, var(--color-text-active) -49.57%, var(--color-text-active) 98.1%);

      span {
         color: var(--color-secondary);
      }

      svg {
         path {
            stroke: var(--color-secondary);
         }
      }
   }
}

.btn-txt-gradient {
   background: #000;
   border: none;
   padding: 10px 22px;
   border-radius: 9px;
   cursor: pointer;
   display: inline-flex;
   align-items: center;
   justify-content: center;
   box-shadow: 0px 4px 4px 0px #00000012;
   transition: var(--transition-fast);

   &.p-sm {
      padding: 12px;
   }

   /* Gradient text */
   span {
      font-family: var(--font-family-heading);
      font-weight: 500;
      font-size: 14px;
      display: inline-block;
      letter-spacing: 0.25px;
      background: linear-gradient(103.7deg, #FECE26 4.76%, #E5741F 118.16%);
      -webkit-background-clip: text;
      background-clip: text;
      -webkit-text-fill-color: transparent;
      color: transparent;
      line-height: 17px;
   }

   &:hover {
      filter: brightness(120%);
   }
}